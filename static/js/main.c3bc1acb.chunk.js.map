{"version":3,"sources":["PlayAgain.js","PlaySlot.js","Game.js","ScoreBoard.js","TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["PlayAgain","props","status","className","id","onClick","PlaySlot","onButtonClick","number","containsAll","arr1","arr2","every","i","includes","Game","React","player","setPlayer","player1Selection","setPlayer1Selection","player2Selection","setPlayer2Selection","availableNums","setAvailableNums","positionStatus","location","updateScoreBoard","winners","push","gameStatus","setWinners","length","onSlotChosen","currentStatus","newCandidateNums","filter","cn","currentPlayer","SwitchPlayers","update","startNewGame","style","textAlign","key","GameResult","gameId","winner","utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","_","ScoreBoard","gameCounter","map","result","gamesPlayed","TicTacToe","setGameId","winnerTracker","setWinnerTracker","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3bc1acb.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nconst PlayAgain = (props) => {\r\n  return (\r\n    <div>\r\n      {props.status === \"tie\" ? (\r\n        <h2 className=\"current-player\">Game Over, Tie!</h2>\r\n      ) : (\r\n        <h2 className=\"current-player\">Winner is {props.status}!</h2>\r\n      )}\r\n      <button id=\"play-again\" onClick={props.onClick}>\r\n        Play Again?\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayAgain;\r\n","import * as React from \"react\";\r\n\r\nconst PlaySlot = (props) => {\r\n  const handleClick = () => {\r\n    props.onButtonClick(props.number, props.status);\r\n  };\r\n  return (\r\n    <button className=\"slot\" onClick={handleClick}>\r\n      {props.status === \"used\" ? \"X\" : props.status === \"hello\" ? \"O\" : \"\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PlaySlot;\r\n","import * as React from 'react';\r\nimport PlayAgain from './PlayAgain';\r\nimport PlaySlot from './PlaySlot';\r\n\r\nfunction Game (props) {\r\n    const [player, setPlayer] = React.useState(1);\r\n    const [player1Selection, setPlayer1Selection] = React.useState([]);\r\n    const [player2Selection, setPlayer2Selection] = React.useState([]);\r\n    const [availableNums, setAvailableNums] = React.useState([1,2,3,4,5,6,7,8,9]);\r\n    \r\n    const positionStatus = (location) =>{\r\n        if(!availableNums.includes(location)){\r\n            if(player2Selection.includes(location))\r\n            {\r\n                return 'hello';\r\n            }\r\n            return 'used'\r\n        }\r\n        return 'available';\r\n    }\r\n\r\n    const updateScoreBoard = () =>{\r\n        props.winners.push(gameStatus());\r\n        props.setWinners(props.winners);\r\n    }\r\n\r\n    const gameStatus = () =>{ \r\n        if(containsAll([1,2,3], player1Selection) || containsAll([4,5,6], player1Selection)\r\n        || containsAll([7,8,9], player1Selection) || containsAll([1,4,7], player1Selection)\r\n        || containsAll([2,5,8], player1Selection) || containsAll([3,6,9], player1Selection)\r\n        || containsAll([1,5,9], player1Selection) || containsAll([3,5,7], player1Selection))\r\n        {\r\n            return 'player1'\r\n        }\r\n        if(containsAll([1,2,3], player2Selection) || containsAll([4,5,6], player2Selection)\r\n        || containsAll([7,8,9], player2Selection) || containsAll([1,4,7], player2Selection)\r\n        || containsAll([2,5,8], player2Selection) || containsAll([3,6,9], player2Selection)\r\n        || containsAll([1,5,9], player2Selection) || containsAll([3,5,7], player2Selection))\r\n        {\r\n            return 'player2'\r\n        }\r\n        if(availableNums.length === 0)\r\n        {\r\n            return 'tie';\r\n        }\r\n        return 'active';\r\n    }\r\n\r\n    const onSlotChosen = (location, currentStatus) =>{\r\n        if(currentStatus !== 'available' || gameStatus() !== 'active'){\r\n            return;\r\n        }\r\n\r\n        if(player === 1)\r\n        {\r\n            player1Selection.push(location);\r\n            setPlayer1Selection(player1Selection);\r\n        }\r\n        if(player === 2)\r\n        {\r\n            player2Selection.push(location);\r\n            setPlayer2Selection(player2Selection);\r\n        }\r\n\r\n        \r\n        //Update the available list\r\n        const newCandidateNums = availableNums.filter(cn => cn !== location);       \r\n        setAvailableNums(newCandidateNums);\r\n\r\n        //Switch to the other player\r\n        setPlayer(SwitchPlayers(player));\r\n    };\r\n    \r\n    return ( \r\n        <div className = \"game\">\r\n        <h1>Tic-Tac-Toe Game</h1>\r\n        {gameStatus() !== 'active'\r\n        ? ( \r\n            updateScoreBoard(),\r\n            <PlayAgain update={updateScoreBoard} onClick={props.startNewGame} status={gameStatus()} />          \r\n        ) \r\n        : (<h2 style={{textAlign: \"center\" }}>It is Player {player} turn.</h2>)}\r\n        \r\n        <div className=\"left\">\r\n        <div id=\"outer\">\r\n            <PlaySlot key = {1} number={1} status={positionStatus(1)} onButtonClick = {onSlotChosen} />\r\n            <PlaySlot key = {2} number={2} status={positionStatus(2)} onButtonClick = {onSlotChosen} />\r\n            <PlaySlot key = {3} number={3} status={positionStatus(3)} onButtonClick = {onSlotChosen} />\r\n        </div>\r\n        <div id=\"outer\">\r\n            <PlaySlot key = {4} number={4} status={positionStatus(4)} onButtonClick = {onSlotChosen} />\r\n            <PlaySlot key = {5} number={5} status={positionStatus(5)} onButtonClick = {onSlotChosen} />\r\n            <PlaySlot key = {6} number={6} status={positionStatus(6)} onButtonClick = {onSlotChosen} />\r\n        </div>\r\n        <div id=\"outer\">\r\n            <PlaySlot key = {7} number={7} status={positionStatus(7)} onButtonClick = {onSlotChosen} />\r\n            <PlaySlot key = {8} number={8} status={positionStatus(8)} onButtonClick = {onSlotChosen} />\r\n            <PlaySlot key = {9} number={9} status={positionStatus(9)} onButtonClick = {onSlotChosen} />\r\n        </div>\r\n        </div>\r\n        </div>\r\n     );}\r\n\r\nfunction SwitchPlayers (currentPlayer){\r\n    if(currentPlayer === 1)\r\n    {\r\n        return 2;\r\n    }\r\n    return 1;\r\n}\r\n\r\nfunction containsAll(arr1, arr2){ \r\n    return arr1.every(i => arr2.includes(i));\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\n\r\nfunction ScoreBoard(props) {\r\n  return (\r\n    <div className=\"score-board\">\r\n      <h1>Score Board</h1>\r\n      {utils.range(0, props.gameCounter).map((result) => (\r\n        <GameResult\r\n          key={result}\r\n          gameId={result}\r\n          winner={props.gamesPlayed[result]}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction GameResult(props) {\r\n  return (\r\n    <div className=\"previous-winners\">\r\n      <h3>\r\n        Game {props.gameId + 1}: {props.winner}\r\n      </h3>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Math science\r\nconst utils = {\r\n  // Sum an array\r\n  sum: (arr) => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({ length: max - min }, (_, i) => min + i),\r\n};\r\n\r\nexport default ScoreBoard;\r\n","import * as React from \"react\";\r\nimport Game from \"./Game\";\r\nimport ScoreBoard from \"./ScoreBoard\";\r\n\r\nfunction TicTacToe() {\r\n  const [gameId, setGameId] = React.useState(1);\r\n  const [winnerTracker, setWinnerTracker] = React.useState([]);\r\n  return (\r\n    <>\r\n      <ScoreBoard gamesPlayed={winnerTracker} gameCounter={gameId} />\r\n      <Game\r\n        key={gameId}\r\n        winners={winnerTracker}\r\n        setWinners={setWinnerTracker}\r\n        startNewGame={() => setGameId(gameId + 1)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TicTacToe;\r\n","import React from \"react\";\nimport TicTacToe from \"./TicTacToe\";\n\nexport default function App() {\n  return <TicTacToe />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}